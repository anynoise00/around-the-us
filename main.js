!function(){"use strict";var t={d:function(e,r){for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:function(t,e){return Object.prototype.hasOwnProperty.call(t,e)}};function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}function r(t,r){for(var n=0;n<r.length;n++){var o=r[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,r){if("object"!==e(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==e(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===e(i)?i:String(i)),o)}var i}t.d({},{Sg:function(){return Z},lx:function(){return et},Ar:function(){return ct},ae:function(){return it},eY:function(){return tt}});var n=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=document.querySelector(r)}var e,n;return e=t,(n=[{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(t){t.preventDefault()})),this._setEventListeners()}},{key:"clearWarnings",value:function(){var t=this,e=Array.from(this._form.querySelectorAll(this._inputSelector)),r=this._form.querySelector(this._submitButtonSelector);this._toggleButtonState(e,r),e.forEach((function(e){t._hideInputError(e)}))}},{key:"_setEventListeners",value:function(){var t=this,e=Array.from(this._form.querySelectorAll(this._inputSelector)),r=this._form.querySelector(this._submitButtonSelector);this._toggleButtonState(e,r),e.forEach((function(n){n.addEventListener("input",(function(){t._checkInputValidity(n),t._toggleButtonState(e,r)}))}))}},{key:"_checkInputValidity",value:function(t){this._setCustomErrorMessage(t),t.validity.valid?this._hideInputError(t):this._showInputError(t,t.validationMessage)}},{key:"_toggleButtonState",value:function(t,e){this._hasInvalidInput(t)?e.classList.add(this._inactiveButtonClass):e.classList.remove(this._inactiveButtonClass)}},{key:"_hasInvalidInput",value:function(t){return t.some((function(t){return!t.validity.valid}))}},{key:"_showInputError",value:function(t,e){var r=this._form.querySelector(".".concat(t.id,"-error"));t.classList.add(this._inputErrorClass),r.textContent=e,r.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(t){var e=this._form.querySelector(".".concat(t.id,"-error"));t.classList.remove(this._inputErrorClass),e.classList.remove(this._errorClass),e.textContent=""}},{key:"_setCustomErrorMessage",value:function(t){var e=t.validity;e.valueMissing?t.setCustomValidity("Preencha este campo."):e.tooShort?t.setCustomValidity("Por favor, insira pelo menos 2 caracteres."):e.typeMismatch?t.setCustomValidity("Por favor, insira um endereÃ§o web."):t.setCustomValidity("")}}])&&r(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==o(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===o(i)?i:String(i)),n)}var i}var a=function(){function t(e,r){var n=e.items,o=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._items=n,this._renderer=o,this._container=document.querySelector(r)}var e,r;return e=t,(r=[{key:"renderItems",value:function(){var t=this;this.clear(),this._items.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(t){this._container.append(t)}},{key:"clear",value:function(){this._container.innerHTML=""}}])&&i(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}(),u={inputSelector:".form__field",submitButtonSelector:".form__button-submit",inactiveButtonClass:"form__button-submit_inactive",inputErrorClass:"form__field_type_error",errorClass:"form__input-error_active"},l=".form__field",c="popup_visible",s=".card__button-like",f=".card__button-delete",y="card__button-like_active",p=document.querySelector(".image-popup__image"),m=document.querySelector(".image-popup__title"),d=document.querySelector(".profile"),v=d.querySelector(".profile__button-edit"),h=d.querySelector(".profile__button-add"),b=d.querySelector(".profile__avatar-overlay");function _(t){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_(t)}function S(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==_(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==_(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===_(o)?o:String(o)),n)}var o}var g=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._isOpen=!1,this._element=document.querySelector(e)}var e,r;return e=t,(r=[{key:"open",value:function(){this._isOpen=!0,this._element.classList.add(c)}},{key:"close",value:function(){this._isOpen=!1,this._element.classList.remove(c)}},{key:"setEventListeners",value:function(){var t=this;this._element.querySelector(".popup__button-close").addEventListener("click",(function(){t.close()})),this._element.querySelector(".popup__overlay").addEventListener("click",(function(){t.close()})),document.addEventListener("keydown",(function(e){t._handleEscClose(e)}))}},{key:"_handleEscClose",value:function(t){this._isOpen&&"Escape"===t.key&&this.close()}}])&&S(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function k(t){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},k(t)}function w(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==k(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==k(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===k(o)?o:String(o)),n)}var o}function E(){return E="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=C(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},E.apply(this,arguments)}function O(t,e){return O=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},O(t,e)}function C(t){return C=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},C(t)}var j=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&O(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=C(n);if(o){var r=C(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===k(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function a(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,t)}return e=a,(r=[{key:"open",value:function(t){var e=t.name,r=t.link,n=t.alt,o=void 0===n?"Uma imagem ampliada da paisagem.":n;m.textContent=e,p.src=r,p.alt=o,E(C(a.prototype),"open",this).call(this)}}])&&w(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),a}(g);function P(t){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},P(t)}function L(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function T(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==P(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==P(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===P(o)?o:String(o)),n)}var o}function q(){return q="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=x(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},q.apply(this,arguments)}function I(t,e){return I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},I(t,e)}function x(t){return x=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},x(t)}var B=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&I(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=x(n);if(o){var r=x(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===P(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function a(t,e){var r,n=t.handleFormSubmit,o=t.submitDefaultText,u=void 0===o?"Enviar":o,l=t.submitSendText,c=void 0===l?"Enviando...":l,s=t.onOpen,f=void 0===s?function(){}:s,y=t.onClose,p=void 0===y?function(){}:y;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(r=i.call(this,e))._handleFormSubmit=n,r._onOpen=f,r._onClose=p,r._form=r._element.querySelector(".form"),r._submitBtn=r._form.querySelector(".form__button-submit"),r._submitDefaultText=u,r._submitSendText=c,r}return e=a,(r=[{key:"setEventListeners",value:function(){var t=this;q(x(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(e){var r=t._getInputValues();t._submitBtn.textContent=t._submitSendText,t._handleFormSubmit(e,r)}))}},{key:"setFormValues",value:function(t){var e=this;Object.entries(t).forEach((function(t){var r,n,o=(n=2,function(t){if(Array.isArray(t))return t}(r=t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,a,u=[],l=!0,c=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(u.push(n.value),u.length!==e);l=!0);}catch(t){c=!0,o=t}finally{try{if(!l&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(c)throw o}}return u}}(r,n)||function(t,e){if(t){if("string"==typeof t)return L(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?L(t,e):void 0}}(r,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1];e._form.querySelector(l+'[name="'.concat(i,'"]')).value=a}))}},{key:"open",value:function(){this._onOpen(),q(x(a.prototype),"open",this).call(this)}},{key:"close",value:function(){q(x(a.prototype),"close",this).call(this),this._submitBtn.textContent=this._submitDefaultText,this._form.reset(),this._onClose()}},{key:"_getInputValues",value:function(){var t={};return this._form.querySelectorAll(l).forEach((function(e){t[e.name]=e.value})),t}}])&&T(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),a}(g);function U(t){return U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},U(t)}function R(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==U(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==U(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===U(o)?o:String(o)),n)}var o}var D=function(){function t(e,r){var n=e.data,o=r.nameSelector,i=r.aboutSelector,a=r.avatarSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._userId=n._id,this._nameElement=document.querySelector(o),this._aboutElement=document.querySelector(i),this._avatarElement=document.querySelector(a)}var e,r;return e=t,(r=[{key:"getUserId",value:function(){return this._userId}},{key:"getUserInfo",value:function(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent}}},{key:"setUserInfo",value:function(t){var e=t.name,r=t.about;this._nameElement.textContent=e,this._aboutElement.textContent=r}},{key:"setUserAvatar",value:function(t){var e=t.avatar;this._avatarElement.src=e}}])&&R(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function A(t){return A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},A(t)}function V(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==A(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==A(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===A(o)?o:String(o)),n)}var o}var F=function(){function t(e,r){var n=e.data,o=e.handleCardClick,i=e.userId;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._id=n._id,this._name=n.name,this._link=n.link,this._alt=n.alt,this._templateSelector=r,this._userLiked=n.likes.some((function(t){return t._id==i})),this._likeCount=n.likes.length,this._isOwner=n.owner._id==i,this._handleCardClick=o}var e,r;return e=t,(r=[{key:"generateCard",value:function(){var t;this._element=this._getTemplate(),this._setEventListeners(),this._isOwner||this._element.querySelector(f).classList.add("card__button-delete_hidden"),this._element.querySelector(".card__title").textContent=this._name;var e=this._element.querySelector(".card__image");return e.src=this._link,e.alt=null!==(t=this._alt)&&void 0!==t?t:"Uma imagem da paisagem do ".concat(this._name),this._likeBtnElement=this._element.querySelector(s),this._userLiked&&this._likeBtnElement.classList.add(y),this._renderLikes(),this._element}},{key:"_setEventListeners",value:function(){var t=this;this._element.querySelector(s).addEventListener("click",(function(){t._toggleLikeButton()})),this._isOwner&&this._element.querySelector(f).addEventListener("click",(function(){ct.setConfirmAction((function(){Z.deleteCard(t._id).catch(W),t._deleteCard(),ct.close()})),ct.open()})),this._element.querySelector(".card__button-view-image").addEventListener("click",(function(){t._handleCardClick({name:t._name,link:t._link,alt:t._alt})}))}},{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}},{key:"_deleteCard",value:function(){this._element.remove()}},{key:"_toggleLikeButton",value:function(){var t=this;this._userLiked=!this._userLiked,(this._userLiked?this._like():this._dislike()).then((function(e){t._likeCount=e.likes.length,t._renderLikes()})).catch(W)}},{key:"_like",value:function(){return this._likeBtnElement.classList.add(y),Z.likeCard(this._id)}},{key:"_dislike",value:function(){return this._likeBtnElement.classList.remove(y),Z.dislikeCard(this._id)}},{key:"_renderLikes",value:function(){this._element.querySelector(".card__like-counter").textContent=this._likeCount}}])&&V(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function M(t){var e=new F({data:t,handleCardClick:function(t){it.open(t)},userId:tt.getUserId()},"#card-template").generateCard();et.addItem(e)}function N(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))}function W(t){alert("Algo deu errado. ".concat(t,"."))}function H(t){return H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},H(t)}function J(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==H(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==H(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===H(o)?o:String(o)),n)}var o}var z=function(){function t(e){var r=e.baseUrl,n=e.headers;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._baseUrl=r,this._headers=n}var e,r;return e=t,(r=[{key:"getUserData",value:function(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then(N)}},{key:"updateUserData",value:function(t){var e=t.name,r=t.about;return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:r})}).then(N)}},{key:"updateAvatar",value:function(t){var e=t.avatar;return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(N)}},{key:"getInitialCards",value:function(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then(N)}},{key:"addCard",value:function(t){var e=t.name,r=t.link;return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:r})}).then(N)}},{key:"deleteCard",value:function(t){return fetch(this._baseUrl+"/cards/"+t,{method:"DELETE",headers:this._headers}).then(N)}},{key:"likeCard",value:function(t){return fetch(this._baseUrl+"/cards/likes/"+t,{method:"PUT",headers:this._headers}).then(N)}},{key:"dislikeCard",value:function(t){return fetch(this._baseUrl+"/cards/likes/"+t,{method:"DELETE",headers:this._headers}).then(N)}}])&&J(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Y(t){return Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Y(t)}function $(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Y(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==Y(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===Y(o)?o:String(o)),n)}var o}function G(){return G="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Q(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},G.apply(this,arguments)}function K(t,e){return K=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},K(t,e)}function Q(t){return Q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Q(t)}var X=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&K(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Q(n);if(o){var r=Q(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Y(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function a(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,t)}return e=a,(r=[{key:"setEventListeners",value:function(){var t=this;G(Q(a.prototype),"setEventListeners",this).call(this),this._element.querySelector(".popup__button-confirm").addEventListener("click",(function(e){e.preventDefault(),t._handleConfirm()}))}},{key:"setConfirmAction",value:function(t){this._handleConfirm=t}}])&&$(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),a}(g),Z=new z({baseUrl:"https://around.nomoreparties.co/v1/".concat("web_ptbr_04"),headers:{authorization:"56988fc2-c072-4a64-b0a6-6eaae5ae8b3e","Content-Type":"application/json"}}),tt={},et={};Z.getUserData().then((function(t){(tt=new D({data:t},{nameSelector:".profile__name",aboutSelector:".profile__description",avatarSelector:".profile__avatar"})).setUserInfo(t),tt.setUserAvatar(t)})).then((function(){Z.getInitialCards().then((function(t){et=new a({items:t,renderer:M},".cards")})).then((function(){return et.renderItems()})).catch(W)})).catch(W);var rt=new B({handleFormSubmit:function(t,e){t.preventDefault(),Z.updateUserData({name:e.name,about:e.about}).then((function(t){tt.setUserInfo(t),rt.close()})).catch(W)},submitDefaultText:"Salvar",submitSendText:"Salvando...",onOpen:function(){return rt.setFormValues(tt.getUserInfo())},onClose:function(){return at.clearWarnings()}},"#popup-edit-profile"),nt=new B({handleFormSubmit:function(t,e){t.preventDefault(),Z.addCard({name:e.title,link:e.link}).then((function(t){M(t),nt.close()})).catch(W)},submitDefaultText:"Criar",submitSendText:"Criando...",onClose:function(){return ut.clearWarnings()}},"#popup-add-image"),ot=new B({handleFormSubmit:function(t,e){t.preventDefault(),Z.updateAvatar({avatar:e.avatar}).then((function(){tt.setUserAvatar({avatar:e.avatar}),ot.close()})).catch((function(t){ot.close(),W(t)}))},submitDefaultText:"Salvar",submitSendText:"Salvando...",onClose:function(){return lt.clearWarnings()}},"#popup-edit-avatar"),it=new j("#popup-image-view"),at=new n(u,".form_type_edit-profile"),ut=new n(u,".form_type_add-image"),lt=new n(u,".form_type_edit-avatar"),ct=new X("#popup-confirmation");h.addEventListener("click",(function(){return nt.open()})),v.addEventListener("click",(function(){return rt.open()})),b.addEventListener("click",(function(){return ot.open()})),nt.setEventListeners(),rt.setEventListeners(),ot.setEventListeners(),it.setEventListeners(),ct.setEventListeners(),at.enableValidation(),ut.enableValidation(),lt.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPcUIsU0FDOUJpQyxNQUFLLFdBQ0pTLEdBQVMrQixjQUFjLENBQUV6RSxPQUFRckIsRUFBT3FCLFNBQ3hDc0YsR0FBZ0J4SSxPQUNsQixJQUNDNEUsT0FBTSxTQUFDMkIsR0FDTmlDLEdBQWdCeEksUUFDaEI2RSxFQUFXMEIsRUFDYixHQUNKLEVBQ0F2RixrQkFBbUIsU0FDbkJFLGVBQWdCLGNBQ2hCSSxRQUFTLGtCQUFNb0gsR0FBb0JQLGVBQWUsR1Q3R2Ysc0JTa0gxQnpDLEdBQWlCLElBQUl4RixFVDVHQyxxQlM2RzdCZ0ksR0FBbUIsSUFBSXROLEVBQWNvRSxFVHRISiwyQlN1SGpDdUosR0FBb0IsSUFBSTNOLEVBQWNvRSxFVGhIUix3QlNpSDlCMEosR0FBc0IsSUFBSTlOLEVBQzlCb0UsRVRySG9DLDBCU3lIekIySixHQUFxQixJQUFJdkIsRVQ5RkcsdUJTa0d6QzFILEVBQVkzRCxpQkFBaUIsU0FBUyxrQkFBTXFNLEdBQWN6QyxNQUFNLElBQ2hFbEcsRUFBZTFELGlCQUFpQixTQUFTLGtCQUFNK0wsR0FBaUJuQyxNQUFNLElBQ3RFaEcsRUFBcUI1RCxpQkFBaUIsU0FBUyxrQkFBTXlNLEdBQWdCN0MsTUFBTSxJQUUzRXlDLEdBQWNRLG9CQUNkZCxHQUFpQmMsb0JBQ2pCSixHQUFnQkksb0JBQ2hCbEQsR0FBZWtELG9CQUNmRCxHQUFtQkMsb0JBQ25CVixHQUFpQlcsbUJBQ2pCTixHQUFrQk0sbUJBQ2xCSCxHQUFvQkcsa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldWEtYWZvcmEvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZXVhLWFmb3JhL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9ldWEtYWZvcmEvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9ldWEtYWZvcmEvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vZXVhLWFmb3JhLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL2V1YS1hZm9yYS8uL3NyYy9zY3JpcHRzL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9ldWEtYWZvcmEvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL2V1YS1hZm9yYS8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vZXVhLWFmb3JhLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL2V1YS1hZm9yYS8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vZXVhLWFmb3JhLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL2V1YS1hZm9yYS8uL3NyYy9zY3JpcHRzL3V0aWxzL3V0aWxzLmpzIiwid2VicGFjazovL2V1YS1hZm9yYS8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL2V1YS1hZm9yYS8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvQ29uZmlybWF0aW9uUG9wdXAuanMiLCJ3ZWJwYWNrOi8vZXVhLWFmb3JhLy4vc3JjL3NjcmlwdHMvcGFnZXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKGNvbmZpZywgZm9ybVNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gY29uZmlnLmlucHV0U2VsZWN0b3I7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IGNvbmZpZy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcclxuICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSBjb25maWcuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IGNvbmZpZy5pbnB1dEVycm9yQ2xhc3M7XHJcbiAgICB0aGlzLl9lcnJvckNsYXNzID0gY29uZmlnLmVycm9yQ2xhc3M7XHJcblxyXG4gICAgdGhpcy5fZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZm9ybVNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2KSA9PiB7XHJcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJXYXJuaW5ncygpIHtcclxuICAgIGNvbnN0IGlucHV0TGlzdCA9IEFycmF5LmZyb20oXHJcbiAgICAgIHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dFNlbGVjdG9yKVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBidXR0b25FbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKGlucHV0TGlzdCwgYnV0dG9uRWxlbWVudCk7XHJcblxyXG4gICAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgY29uc3QgaW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgICAgdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXHJcbiAgICApO1xyXG4gICAgY29uc3QgYnV0dG9uRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcbiAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZShpbnB1dExpc3QsIGJ1dHRvbkVsZW1lbnQpO1xyXG5cclxuICAgIGlucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dCk7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRMaXN0LCBidXR0b25FbGVtZW50KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXQpIHtcclxuICAgIHRoaXMuX3NldEN1c3RvbUVycm9yTWVzc2FnZShpbnB1dCk7XHJcbiAgICBpZiAoIWlucHV0LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0LCBpbnB1dC52YWxpZGF0aW9uTWVzc2FnZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRMaXN0LCBidXR0b25FbGVtZW50KSB7XHJcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KGlucHV0TGlzdCkpIHtcclxuICAgICAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2hhc0ludmFsaWRJbnB1dChpbnB1dExpc3QpIHtcclxuICAgIHJldHVybiBpbnB1dExpc3Quc29tZSgoaW5wdXRFbGVtZW50KSA9PiAhaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKTtcclxuICB9XHJcblxyXG4gIF9zaG93SW5wdXRFcnJvcihpbnB1dCwgZXJyb3JNZXNzYWdlKSB7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoYC4ke2lucHV0LmlkfS1lcnJvcmApO1xyXG4gICAgaW5wdXQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG5cclxuICBfaGlkZUlucHV0RXJyb3IoaW5wdXQpIHtcclxuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihgLiR7aW5wdXQuaWR9LWVycm9yYCk7XHJcbiAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgfVxyXG5cclxuICBfc2V0Q3VzdG9tRXJyb3JNZXNzYWdlKGlucHV0KSB7XHJcbiAgICBjb25zdCB2YWxpZGl0eVN0YXRlID0gaW5wdXQudmFsaWRpdHk7XHJcblxyXG4gICAgaWYgKHZhbGlkaXR5U3RhdGUudmFsdWVNaXNzaW5nKSB7XHJcbiAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KFwiUHJlZW5jaGEgZXN0ZSBjYW1wby5cIik7XHJcbiAgICB9IGVsc2UgaWYgKHZhbGlkaXR5U3RhdGUudG9vU2hvcnQpIHtcclxuICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJQb3IgZmF2b3IsIGluc2lyYSBwZWxvIG1lbm9zIDIgY2FyYWN0ZXJlcy5cIik7XHJcbiAgICB9IGVsc2UgaWYgKHZhbGlkaXR5U3RhdGUudHlwZU1pc21hdGNoKSB7XHJcbiAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KFwiUG9yIGZhdm9yLCBpbnNpcmEgdW0gZW5kZXJlw6dvIHdlYi5cIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlwiKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG5cclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7IHRoaXMuX3JlbmRlcmVyKGl0ZW0pIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShpdGVtKSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kKGl0ZW0pO1xyXG4gIH1cclxuXHJcbiAgY2xlYXIoKSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuICB9XHJcbn0iLCJleHBvcnQgY29uc3QgZm9ybUNvbmZpZyA9IHtcclxuICBpbnB1dFNlbGVjdG9yOiBcIi5mb3JtX19maWVsZFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5mb3JtX19idXR0b24tc3VibWl0XCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJmb3JtX19idXR0b24tc3VibWl0X2luYWN0aXZlXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcImZvcm1fX2ZpZWxkX3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcImZvcm1fX2lucHV0LWVycm9yX2FjdGl2ZVwiLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdyb3VwSWQgPSBcIndlYl9wdGJyXzA0XCI7XHJcbmV4cG9ydCBjb25zdCB0b2tlbiA9IFwiNTY5ODhmYzItYzA3Mi00YTY0LWIwYTYtNmVhYWU1YWU4YjNlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZm9ybVNlbGVjdG9yID0gXCIuZm9ybVwiO1xyXG5leHBvcnQgY29uc3QgZm9ybUZpZWxkU2VsZWN0b3IgPSBcIi5mb3JtX19maWVsZFwiO1xyXG5leHBvcnQgY29uc3QgZm9ybVN1Ym1pdFNlbGVjdG9yID0gXCIuZm9ybV9fYnV0dG9uLXN1Ym1pdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVkaXRQcm9maWxlRm9ybVNlbGVjdG9yID0gXCIuZm9ybV90eXBlX2VkaXQtcHJvZmlsZVwiO1xyXG5leHBvcnQgY29uc3QgZWRpdFByb2ZpbGVQb3B1cFNlbGVjdG9yID0gXCIjcG9wdXAtZWRpdC1wcm9maWxlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZWRpdEF2YXRhclBvcHVwU2VsZWN0b3IgPSBcIiNwb3B1cC1lZGl0LWF2YXRhclwiO1xyXG5leHBvcnQgY29uc3QgZWRpdEF2YXRhckZvcm1TZWxlY3RvciA9IFwiLmZvcm1fdHlwZV9lZGl0LWF2YXRhclwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZEltYWdlUG9wdXBTZWxlY3RvciA9IFwiI3BvcHVwLWFkZC1pbWFnZVwiO1xyXG5leHBvcnQgY29uc3QgYWRkSW1hZ2VGb3JtU2VsZWN0b3IgPSBcIi5mb3JtX3R5cGVfYWRkLWltYWdlXCI7XHJcblxyXG5leHBvcnQgY29uc3Qgdmlld2VyUG9wdXBTZWxlY3RvciA9IFwiI3BvcHVwLWltYWdlLXZpZXdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwcm9maWxlTmFtZVNlbGVjdG9yID0gXCIucHJvZmlsZV9fbmFtZVwiO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUFib3V0U2VsZWN0b3IgPSBcIi5wcm9maWxlX19kZXNjcmlwdGlvblwiO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUF2YXRhclNlbGVjdG9yID0gXCIucHJvZmlsZV9fYXZhdGFyXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcG9wdXBDbG9zZUJ0blNlbGVjdG9yID0gXCIucG9wdXBfX2J1dHRvbi1jbG9zZVwiO1xyXG5leHBvcnQgY29uc3QgcG9wdXBPdmVybGF5U2VsZWN0b3IgPSBcIi5wb3B1cF9fb3ZlcmxheVwiO1xyXG5leHBvcnQgY29uc3QgcG9wdXBDb25maXJtQnRuU2VsZWN0b3IgPSBcIi5wb3B1cF9fYnV0dG9uLWNvbmZpcm1cIjtcclxuZXhwb3J0IGNvbnN0IHBvcHVwVmlzaWJsZSA9IFwicG9wdXBfdmlzaWJsZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNhcmRMaXN0U2VsZWN0b3IgPSBcIi5jYXJkc1wiO1xyXG5leHBvcnQgY29uc3QgY2FyZFRlbXBsYXRlU2VsZWN0b3IgPSBcIiNjYXJkLXRlbXBsYXRlXCI7XHJcbmV4cG9ydCBjb25zdCBjYXJkU2VsZWN0b3IgPSBcIi5jYXJkXCI7XHJcbmV4cG9ydCBjb25zdCBjYXJkVGl0bGVTZWxlY3RvciA9IFwiLmNhcmRfX3RpdGxlXCI7XHJcbmV4cG9ydCBjb25zdCBjYXJkSW1hZ2VTZWxlY3RvciA9IFwiLmNhcmRfX2ltYWdlXCI7XHJcbmV4cG9ydCBjb25zdCBjYXJkTGlrZUJ0blNlbGVjdG9yID0gXCIuY2FyZF9fYnV0dG9uLWxpa2VcIjtcclxuZXhwb3J0IGNvbnN0IGNhcmRMaWtlQ291bnRlclNlbGVjdG9yID0gXCIuY2FyZF9fbGlrZS1jb3VudGVyXCI7XHJcbmV4cG9ydCBjb25zdCBjYXJkRGVsZXRlQnRuU2VsZWN0b3IgPSBcIi5jYXJkX19idXR0b24tZGVsZXRlXCI7XHJcbmV4cG9ydCBjb25zdCBjYXJkVmlld0J0blNlbGVjdG9yID0gXCIuY2FyZF9fYnV0dG9uLXZpZXctaW1hZ2VcIjtcclxuZXhwb3J0IGNvbnN0IGNhcmRCdG5MaWtlQWN0aXZlID0gXCJjYXJkX19idXR0b24tbGlrZV9hY3RpdmVcIjtcclxuZXhwb3J0IGNvbnN0IGNhcmRCdG5EZWxldGVIaWRkZW4gPSBcImNhcmRfX2J1dHRvbi1kZWxldGVfaGlkZGVuXCI7XHJcbmV4cG9ydCBjb25zdCBjb25maXJtYXRpb25Qb3B1cFNlbGVjdG9yID0gXCIjcG9wdXAtY29uZmlybWF0aW9uXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZW5sYXJnZWRJbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW1hZ2UtcG9wdXBfX2ltYWdlXCIpO1xyXG5leHBvcnQgY29uc3QgZW5sYXJnZWRJbWFnZVRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbWFnZS1wb3B1cF9fdGl0bGVcIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlXCIpO1xyXG5leHBvcnQgY29uc3QgZWRpdFByb2ZpbGVCdG4gPSBwcm9maWxlLnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYnV0dG9uLWVkaXRcIik7XHJcbmV4cG9ydCBjb25zdCBhZGRJbWFnZUJ0biA9IHByb2ZpbGUucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19idXR0b24tYWRkXCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUF2YXRhck92ZXJsYXkgPSBwcm9maWxlLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIucHJvZmlsZV9fYXZhdGFyLW92ZXJsYXlcIlxyXG4pO1xyXG4iLCJpbXBvcnQge1xyXG4gIHBvcHVwQ2xvc2VCdG5TZWxlY3RvcixcclxuICBwb3B1cE92ZXJsYXlTZWxlY3RvcixcclxuICBwb3B1cFZpc2libGUsXHJcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX2lzT3BlbiA9IGZhbHNlO1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5faXNPcGVuID0gdHJ1ZTtcclxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChwb3B1cFZpc2libGUpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICB0aGlzLl9pc09wZW4gPSBmYWxzZTtcclxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShwb3B1cFZpc2libGUpO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBjb25zdCBjbG9zZUJ0biA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cENsb3NlQnRuU2VsZWN0b3IpO1xyXG4gICAgY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcG9wdXBPdmVybGF5ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwT3ZlcmxheVNlbGVjdG9yKTtcclxuICAgIHBvcHVwT3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZXYpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlRXNjQ2xvc2UoZXYpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRXNjQ2xvc2UoZXYpIHtcclxuICAgIGlmICh0aGlzLl9pc09wZW4gJiYgZXYua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcbmltcG9ydCB7IGVubGFyZ2VkSW1hZ2UsIGVubGFyZ2VkSW1hZ2VUaXRsZSB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgb3Blbih7IG5hbWUsIGxpbmssIGFsdCA9IFwiVW1hIGltYWdlbSBhbXBsaWFkYSBkYSBwYWlzYWdlbS5cIiB9KSB7XHJcbiAgICBlbmxhcmdlZEltYWdlVGl0bGUudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgZW5sYXJnZWRJbWFnZS5zcmMgPSBsaW5rO1xyXG4gICAgZW5sYXJnZWRJbWFnZS5hbHQgPSBhbHQ7XHJcblxyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuaW1wb3J0IHtcclxuICBmb3JtRmllbGRTZWxlY3RvcixcclxuICBmb3JtU2VsZWN0b3IsXHJcbiAgZm9ybVN1Ym1pdFNlbGVjdG9yLFxyXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICB7XHJcbiAgICAgIGhhbmRsZUZvcm1TdWJtaXQsXHJcbiAgICAgIHN1Ym1pdERlZmF1bHRUZXh0ID0gXCJFbnZpYXJcIixcclxuICAgICAgc3VibWl0U2VuZFRleHQgPSBcIkVudmlhbmRvLi4uXCIsXHJcbiAgICAgIG9uT3BlbiA9ICgpID0+IHt9LFxyXG4gICAgICBvbkNsb3NlID0gKCkgPT4ge30sXHJcbiAgICB9LFxyXG4gICAgcG9wdXBTZWxlY3RvclxyXG4gICkge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgIHRoaXMuX29uT3BlbiA9IG9uT3BlbjtcclxuICAgIHRoaXMuX29uQ2xvc2UgPSBvbkNsb3NlO1xyXG4gICAgdGhpcy5fZm9ybSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3Rvcihmb3JtU2VsZWN0b3IpO1xyXG5cclxuICAgIHRoaXMuX3N1Ym1pdEJ0biA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3Rvcihmb3JtU3VibWl0U2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fc3VibWl0RGVmYXVsdFRleHQgPSBzdWJtaXREZWZhdWx0VGV4dDtcclxuICAgIHRoaXMuX3N1Ym1pdFNlbmRUZXh0ID0gc3VibWl0U2VuZFRleHQ7XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldikgPT4ge1xyXG4gICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLl9nZXRJbnB1dFZhbHVlcygpO1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdG4udGV4dENvbnRlbnQgPSB0aGlzLl9zdWJtaXRTZW5kVGV4dDtcclxuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdChldiwgdmFsdWVzKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0Rm9ybVZhbHVlcyhkYXRhKSB7XHJcbiAgICBPYmplY3QuZW50cmllcyhkYXRhKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgY29uc3QgZmllbGQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgZm9ybUZpZWxkU2VsZWN0b3IgKyBgW25hbWU9XCIke2tleX1cIl1gXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBmaWVsZC52YWx1ZSA9IHZhbHVlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5fb25PcGVuKCk7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdG4udGV4dENvbnRlbnQgPSB0aGlzLl9zdWJtaXREZWZhdWx0VGV4dDtcclxuICAgIHRoaXMuX2Zvcm0ucmVzZXQoKTtcclxuICAgIHRoaXMuX29uQ2xvc2UoKTtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIGNvbnN0IGZvcm1WYWx1ZXMgPSB7fTtcclxuICAgIGNvbnN0IGZvcm1GaWVsZHMgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoZm9ybUZpZWxkU2VsZWN0b3IpO1xyXG5cclxuICAgIGZvcm1GaWVsZHMuZm9yRWFjaCgoZmllbGQpID0+IHtcclxuICAgICAgZm9ybVZhbHVlc1tmaWVsZC5uYW1lXSA9IGZpZWxkLnZhbHVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGZvcm1WYWx1ZXM7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3Rvcih7IGRhdGEgfSwgeyBuYW1lU2VsZWN0b3IsIGFib3V0U2VsZWN0b3IsIGF2YXRhclNlbGVjdG9yIH0pIHtcclxuICAgIHRoaXMuX3VzZXJJZCA9IGRhdGEuX2lkO1xyXG4gICAgdGhpcy5fbmFtZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9hYm91dEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGFib3V0U2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fYXZhdGFyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYXZhdGFyU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlcklkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3VzZXJJZDtcclxuICB9XHJcblxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmFtZTogdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICAgIGFib3V0OiB0aGlzLl9hYm91dEVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8oeyBuYW1lLCBhYm91dCB9KSB7XHJcbiAgICB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICB0aGlzLl9hYm91dEVsZW1lbnQudGV4dENvbnRlbnQgPSBhYm91dDtcclxuICB9XHJcblxyXG4gIHNldFVzZXJBdmF0YXIoeyBhdmF0YXIgfSkge1xyXG4gICAgdGhpcy5fYXZhdGFyRWxlbWVudC5zcmMgPSBhdmF0YXI7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgYXJvdW5kQXBpLFxyXG4gIGRlbGV0ZUNvbmZpcm1Qb3B1cCBhcyBjb25maXJtRGVsZXRpb25Qb3B1cCxcclxufSBmcm9tIFwiLi4vcGFnZXMvaW5kZXguanNcIjtcclxuaW1wb3J0IHtcclxuICBjYXJkQnRuRGVsZXRlSGlkZGVuLFxyXG4gIGNhcmRCdG5MaWtlQWN0aXZlLFxyXG4gIGNhcmREZWxldGVCdG5TZWxlY3RvcixcclxuICBjYXJkSWRTZWxlY3RvcixcclxuICBjYXJkSW1hZ2VTZWxlY3RvcixcclxuICBjYXJkTGlrZUJ0blNlbGVjdG9yLFxyXG4gIGNhcmRMaWtlQ291bnRlclNlbGVjdG9yLFxyXG4gIGNhcmRTZWxlY3RvcixcclxuICBjYXJkVGl0bGVTZWxlY3RvcixcclxuICBjYXJkVmlld0J0blNlbGVjdG9yLFxyXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuaW1wb3J0IHsgYWxlcnRFcnJvciB9IGZyb20gXCIuLi91dGlscy91dGlscy5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XHJcbiAgY29uc3RydWN0b3IoeyBkYXRhLCBoYW5kbGVDYXJkQ2xpY2ssIHVzZXJJZCB9LCB0ZW1wbGF0ZVNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9pZCA9IGRhdGEuX2lkO1xyXG4gICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9hbHQgPSBkYXRhLmFsdDtcclxuICAgIHRoaXMuX3RlbXBsYXRlU2VsZWN0b3IgPSB0ZW1wbGF0ZVNlbGVjdG9yO1xyXG5cclxuICAgIHRoaXMuX3VzZXJMaWtlZCA9IGRhdGEubGlrZXMuc29tZSgoZWxlbSkgPT4gZWxlbS5faWQgPT0gdXNlcklkKTtcclxuICAgIHRoaXMuX2xpa2VDb3VudCA9IGRhdGEubGlrZXMubGVuZ3RoO1xyXG5cclxuICAgIHRoaXMuX2lzT3duZXIgPSBkYXRhLm93bmVyLl9pZCA9PSB1c2VySWQ7XHJcblxyXG4gICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrID0gaGFuZGxlQ2FyZENsaWNrO1xyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGVDYXJkKCkge1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgIGlmICghdGhpcy5faXNPd25lcikge1xyXG4gICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoY2FyZERlbGV0ZUJ0blNlbGVjdG9yKVxyXG4gICAgICAgIC5jbGFzc0xpc3QuYWRkKGNhcmRCdG5EZWxldGVIaWRkZW4pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihjYXJkVGl0bGVTZWxlY3RvcikudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG5cclxuICAgIGNvbnN0IGNhcmRJbWFnZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihjYXJkSW1hZ2VTZWxlY3Rvcik7XHJcbiAgICBjYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcclxuICAgIGNhcmRJbWFnZS5hbHQgPSB0aGlzLl9hbHQgPz8gYFVtYSBpbWFnZW0gZGEgcGFpc2FnZW0gZG8gJHt0aGlzLl9uYW1lfWA7XHJcblxyXG4gICAgdGhpcy5fbGlrZUJ0bkVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoY2FyZExpa2VCdG5TZWxlY3Rvcik7XHJcblxyXG4gICAgaWYgKHRoaXMuX3VzZXJMaWtlZCkge1xyXG4gICAgICB0aGlzLl9saWtlQnRuRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNhcmRCdG5MaWtlQWN0aXZlKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9yZW5kZXJMaWtlcygpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fZWxlbWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcihjYXJkTGlrZUJ0blNlbGVjdG9yKVxyXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICB0aGlzLl90b2dnbGVMaWtlQnV0dG9uKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIGlmICh0aGlzLl9pc093bmVyKSB7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnRcclxuICAgICAgICAucXVlcnlTZWxlY3RvcihjYXJkRGVsZXRlQnRuU2VsZWN0b3IpXHJcbiAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICBjb25maXJtRGVsZXRpb25Qb3B1cC5zZXRDb25maXJtQWN0aW9uKCgpID0+IHtcclxuICAgICAgICAgICAgYXJvdW5kQXBpLmRlbGV0ZUNhcmQodGhpcy5faWQpLmNhdGNoKGFsZXJ0RXJyb3IpO1xyXG4gICAgICAgICAgICB0aGlzLl9kZWxldGVDYXJkKCk7XHJcbiAgICAgICAgICAgIGNvbmZpcm1EZWxldGlvblBvcHVwLmNsb3NlKCk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBjb25maXJtRGVsZXRpb25Qb3B1cC5vcGVuKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fZWxlbWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcihjYXJkVmlld0J0blNlbGVjdG9yKVxyXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2soe1xyXG4gICAgICAgICAgbmFtZTogdGhpcy5fbmFtZSxcclxuICAgICAgICAgIGxpbms6IHRoaXMuX2xpbmssXHJcbiAgICAgICAgICBhbHQ6IHRoaXMuX2FsdCxcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fdGVtcGxhdGVTZWxlY3RvcilcclxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihjYXJkU2VsZWN0b3IpXHJcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcblxyXG4gICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBfZGVsZXRlQ2FyZCgpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgfVxyXG5cclxuICBfdG9nZ2xlTGlrZUJ1dHRvbigpIHtcclxuICAgIHRoaXMuX3VzZXJMaWtlZCA9ICF0aGlzLl91c2VyTGlrZWQ7XHJcblxyXG4gICAgY29uc3QgbGlrZVByb21pc2UgPSB0aGlzLl91c2VyTGlrZWQgPyB0aGlzLl9saWtlKCkgOiB0aGlzLl9kaXNsaWtlKCk7XHJcbiAgICBsaWtlUHJvbWlzZVxyXG4gICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fbGlrZUNvdW50ID0gcmVzLmxpa2VzLmxlbmd0aDtcclxuICAgICAgICB0aGlzLl9yZW5kZXJMaWtlcygpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goYWxlcnRFcnJvcik7XHJcbiAgfVxyXG5cclxuICBfbGlrZSgpIHtcclxuICAgIHRoaXMuX2xpa2VCdG5FbGVtZW50LmNsYXNzTGlzdC5hZGQoY2FyZEJ0bkxpa2VBY3RpdmUpO1xyXG4gICAgcmV0dXJuIGFyb3VuZEFwaS5saWtlQ2FyZCh0aGlzLl9pZCk7XHJcbiAgfVxyXG5cclxuICBfZGlzbGlrZSgpIHtcclxuICAgIHRoaXMuX2xpa2VCdG5FbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2FyZEJ0bkxpa2VBY3RpdmUpO1xyXG4gICAgcmV0dXJuIGFyb3VuZEFwaS5kaXNsaWtlQ2FyZCh0aGlzLl9pZCk7XHJcbiAgfVxyXG5cclxuICBfcmVuZGVyTGlrZXMoKSB7XHJcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoY2FyZExpa2VDb3VudGVyU2VsZWN0b3IpLnRleHRDb250ZW50ID1cclxuICAgICAgdGhpcy5fbGlrZUNvdW50O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkXCI7XHJcbmltcG9ydCB7IGNhcmRTZWN0aW9uLCBpbWFnZVZpZXdQb3B1cCwgdXNlckluZm8gfSBmcm9tIFwiLi4vcGFnZXNcIjtcclxuaW1wb3J0IHsgY2FyZFRlbXBsYXRlU2VsZWN0b3IgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRDYXJkVG9QYWdlKGRhdGEpIHtcclxuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXHJcbiAgICB7XHJcbiAgICAgIGRhdGEsXHJcbiAgICAgIGhhbmRsZUNhcmRDbGljazogKGltZ0RhdGEpID0+IHtcclxuICAgICAgICBpbWFnZVZpZXdQb3B1cC5vcGVuKGltZ0RhdGEpO1xyXG4gICAgICB9LFxyXG4gICAgICB1c2VySWQ6IHVzZXJJbmZvLmdldFVzZXJJZCgpLFxyXG4gICAgfSxcclxuICAgIGNhcmRUZW1wbGF0ZVNlbGVjdG9yXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgY2FyZEVsZW1lbnQgPSBjYXJkLmdlbmVyYXRlQ2FyZCgpO1xyXG4gIGNhcmRTZWN0aW9uLmFkZEl0ZW0oY2FyZEVsZW1lbnQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tSZXNwb25zZShyZXMpIHtcclxuICBpZiAocmVzLm9rKSB7XHJcbiAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFsZXJ0RXJyb3IoZXJyKSB7XHJcbiAgYWxlcnQoYEFsZ28gZGV1IGVycmFkby4gJHtlcnJ9LmApO1xyXG59XHJcbiIsImltcG9ydCB7IGNoZWNrUmVzcG9uc2UgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XHJcbiAgY29uc3RydWN0b3IoeyBiYXNlVXJsLCBoZWFkZXJzIH0pIHtcclxuICAgIHRoaXMuX2Jhc2VVcmwgPSBiYXNlVXJsO1xyXG4gICAgdGhpcy5faGVhZGVycyA9IGhlYWRlcnM7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VyRGF0YSgpIHtcclxuICAgIHJldHVybiBmZXRjaCh0aGlzLl9iYXNlVXJsICsgXCIvdXNlcnMvbWVcIiwge1xyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbihjaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVVzZXJEYXRhKHsgbmFtZSwgYWJvdXQgfSkge1xyXG4gICAgcmV0dXJuIGZldGNoKHRoaXMuX2Jhc2VVcmwgKyBcIi91c2Vycy9tZVwiLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZSxcclxuICAgICAgICBhYm91dCxcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKGNoZWNrUmVzcG9uc2UpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlQXZhdGFyKHsgYXZhdGFyIH0pIHtcclxuICAgIHJldHVybiBmZXRjaCh0aGlzLl9iYXNlVXJsICsgXCIvdXNlcnMvbWUvYXZhdGFyXCIsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBhdmF0YXIsXHJcbiAgICAgIH0pLFxyXG4gICAgfSkudGhlbihjaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIGdldEluaXRpYWxDYXJkcygpIHtcclxuICAgIHJldHVybiBmZXRjaCh0aGlzLl9iYXNlVXJsICsgXCIvY2FyZHNcIiwge1xyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbihjaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIGFkZENhcmQoeyBuYW1lLCBsaW5rIH0pIHtcclxuICAgIHJldHVybiBmZXRjaCh0aGlzLl9iYXNlVXJsICsgXCIvY2FyZHNcIiwge1xyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZSxcclxuICAgICAgICBsaW5rLFxyXG4gICAgICB9KSxcclxuICAgIH0pLnRoZW4oY2hlY2tSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVDYXJkKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKHRoaXMuX2Jhc2VVcmwgKyBcIi9jYXJkcy9cIiArIGNhcmRJZCwge1xyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKGNoZWNrUmVzcG9uc2UpO1xyXG4gIH1cclxuXHJcbiAgbGlrZUNhcmQoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2godGhpcy5fYmFzZVVybCArIFwiL2NhcmRzL2xpa2VzL1wiICsgY2FyZElkLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4oY2hlY2tSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICBkaXNsaWtlQ2FyZChjYXJkSWQpIHtcclxuICAgIHJldHVybiBmZXRjaCh0aGlzLl9iYXNlVXJsICsgXCIvY2FyZHMvbGlrZXMvXCIgKyBjYXJkSWQsIHtcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbihjaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgcG9wdXBDb25maXJtQnRuU2VsZWN0b3IgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcbmltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29uZmlybWF0aW9uUG9wdXAgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgdGhpcy5fZWxlbWVudFxyXG4gICAgICAucXVlcnlTZWxlY3Rvcihwb3B1cENvbmZpcm1CdG5TZWxlY3RvcilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXYpID0+IHtcclxuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZUNvbmZpcm0oKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRDb25maXJtQWN0aW9uKGhhbmRsZXIpIHtcclxuICAgIHRoaXMuX2hhbmRsZUNvbmZpcm0gPSBoYW5kbGVyO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgXCIuLi8uLi9wYWdlcy9pbmRleC5jc3NcIjtcclxuXHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcclxuaW1wb3J0IHtcclxuICBjYXJkTGlzdFNlbGVjdG9yLFxyXG4gIGZvcm1Db25maWcsXHJcbiAgZWRpdFByb2ZpbGVGb3JtU2VsZWN0b3IsXHJcbiAgYWRkSW1hZ2VGb3JtU2VsZWN0b3IsXHJcbiAgZWRpdFByb2ZpbGVQb3B1cFNlbGVjdG9yLFxyXG4gIGFkZEltYWdlUG9wdXBTZWxlY3RvcixcclxuICB2aWV3ZXJQb3B1cFNlbGVjdG9yLFxyXG4gIGVkaXRQcm9maWxlQnRuLFxyXG4gIGFkZEltYWdlQnRuLFxyXG4gIHByb2ZpbGVOYW1lU2VsZWN0b3IsXHJcbiAgcHJvZmlsZUFib3V0U2VsZWN0b3IsXHJcbiAgZ3JvdXBJZCxcclxuICB0b2tlbixcclxuICBwcm9maWxlQXZhdGFyU2VsZWN0b3IsXHJcbiAgY29uZmlybWF0aW9uUG9wdXBTZWxlY3RvcixcclxuICBwcm9maWxlQXZhdGFyT3ZlcmxheSxcclxuICBlZGl0QXZhdGFyUG9wdXBTZWxlY3RvcixcclxuICBlZGl0QXZhdGFyRm9ybVNlbGVjdG9yLFxyXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGlcIjtcclxuaW1wb3J0IHsgYWRkQ2FyZFRvUGFnZSwgYWxlcnRFcnJvciB9IGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xyXG5pbXBvcnQgQ29uZmlybWF0aW9uUG9wdXAgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ29uZmlybWF0aW9uUG9wdXBcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBhcm91bmRBcGkgPSBuZXcgQXBpKHtcclxuICBiYXNlVXJsOiBgaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS8ke2dyb3VwSWR9YCxcclxuICBoZWFkZXJzOiB7XHJcbiAgICBhdXRob3JpemF0aW9uOiB0b2tlbixcclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuZXhwb3J0IGxldCB1c2VySW5mbyA9IHt9O1xyXG5leHBvcnQgbGV0IGNhcmRTZWN0aW9uID0ge307XHJcblxyXG5hcm91bmRBcGlcclxuICAuZ2V0VXNlckRhdGEoKVxyXG4gIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgIHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKFxyXG4gICAgICB7IGRhdGE6IHJlc3VsdCB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZVNlbGVjdG9yOiBwcm9maWxlTmFtZVNlbGVjdG9yLFxyXG4gICAgICAgIGFib3V0U2VsZWN0b3I6IHByb2ZpbGVBYm91dFNlbGVjdG9yLFxyXG4gICAgICAgIGF2YXRhclNlbGVjdG9yOiBwcm9maWxlQXZhdGFyU2VsZWN0b3IsXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgdXNlckluZm8uc2V0VXNlckluZm8ocmVzdWx0KTtcclxuICAgIHVzZXJJbmZvLnNldFVzZXJBdmF0YXIocmVzdWx0KTtcclxuICB9KVxyXG4gIC50aGVuKCgpID0+IHtcclxuICAgIGFyb3VuZEFwaVxyXG4gICAgICAuZ2V0SW5pdGlhbENhcmRzKClcclxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIGNhcmRTZWN0aW9uID0gbmV3IFNlY3Rpb24oXHJcbiAgICAgICAgICB7IGl0ZW1zOiByZXN1bHQsIHJlbmRlcmVyOiBhZGRDYXJkVG9QYWdlIH0sXHJcbiAgICAgICAgICBjYXJkTGlzdFNlbGVjdG9yXHJcbiAgICAgICAgKTtcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oKCkgPT4gY2FyZFNlY3Rpb24ucmVuZGVySXRlbXMoKSlcclxuICAgICAgLmNhdGNoKGFsZXJ0RXJyb3IpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKGFsZXJ0RXJyb3IpO1xyXG5cclxuY29uc3QgZWRpdFByb2ZpbGVQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIHtcclxuICAgIGhhbmRsZUZvcm1TdWJtaXQ6IChldiwgdmFsdWVzKSA9PiB7XHJcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGFyb3VuZEFwaVxyXG4gICAgICAgIC51cGRhdGVVc2VyRGF0YSh7IG5hbWU6IHZhbHVlcy5uYW1lLCBhYm91dDogdmFsdWVzLmFib3V0IH0pXHJcbiAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgdXNlckluZm8uc2V0VXNlckluZm8ocmVzdWx0KTtcclxuICAgICAgICAgIGVkaXRQcm9maWxlUG9wdXAuY2xvc2UoKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChhbGVydEVycm9yKTtcclxuICAgIH0sXHJcbiAgICBzdWJtaXREZWZhdWx0VGV4dDogXCJTYWx2YXJcIixcclxuICAgIHN1Ym1pdFNlbmRUZXh0OiBcIlNhbHZhbmRvLi4uXCIsXHJcbiAgICBvbk9wZW46ICgpID0+IGVkaXRQcm9maWxlUG9wdXAuc2V0Rm9ybVZhbHVlcyh1c2VySW5mby5nZXRVc2VySW5mbygpKSxcclxuICAgIG9uQ2xvc2U6ICgpID0+IHByb2ZpbGVWYWxpZGF0b3IuY2xlYXJXYXJuaW5ncygpLFxyXG4gIH0sXHJcbiAgZWRpdFByb2ZpbGVQb3B1cFNlbGVjdG9yXHJcbik7XHJcblxyXG5jb25zdCBhZGRJbWFnZVBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAge1xyXG4gICAgaGFuZGxlRm9ybVN1Ym1pdDogKGV2LCB2YWx1ZXMpID0+IHtcclxuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgYXJvdW5kQXBpXHJcbiAgICAgICAgLmFkZENhcmQoeyBuYW1lOiB2YWx1ZXMudGl0bGUsIGxpbms6IHZhbHVlcy5saW5rIH0pXHJcbiAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgYWRkQ2FyZFRvUGFnZShyZXN1bHQpO1xyXG4gICAgICAgICAgYWRkSW1hZ2VQb3B1cC5jbG9zZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGFsZXJ0RXJyb3IpO1xyXG4gICAgfSxcclxuICAgIHN1Ym1pdERlZmF1bHRUZXh0OiBcIkNyaWFyXCIsXHJcbiAgICBzdWJtaXRTZW5kVGV4dDogXCJDcmlhbmRvLi4uXCIsXHJcbiAgICBvbkNsb3NlOiAoKSA9PiBhZGRJbWFnZVZhbGlkYXRvci5jbGVhcldhcm5pbmdzKCksXHJcbiAgfSxcclxuICBhZGRJbWFnZVBvcHVwU2VsZWN0b3JcclxuKTtcclxuXHJcbmNvbnN0IGVkaXRBdmF0YXJQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIHtcclxuICAgIGhhbmRsZUZvcm1TdWJtaXQ6IChldiwgdmFsdWVzKSA9PiB7XHJcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGFyb3VuZEFwaVxyXG4gICAgICAgIC51cGRhdGVBdmF0YXIoeyBhdmF0YXI6IHZhbHVlcy5hdmF0YXIgfSlcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICB1c2VySW5mby5zZXRVc2VyQXZhdGFyKHsgYXZhdGFyOiB2YWx1ZXMuYXZhdGFyIH0pO1xyXG4gICAgICAgICAgZWRpdEF2YXRhclBvcHVwLmNsb3NlKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgZWRpdEF2YXRhclBvcHVwLmNsb3NlKCk7XHJcbiAgICAgICAgICBhbGVydEVycm9yKGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgc3VibWl0RGVmYXVsdFRleHQ6IFwiU2FsdmFyXCIsXHJcbiAgICBzdWJtaXRTZW5kVGV4dDogXCJTYWx2YW5kby4uLlwiLFxyXG4gICAgb25DbG9zZTogKCkgPT4gZWRpdEF2YXRhclZhbGlkYXRvci5jbGVhcldhcm5pbmdzKCksXHJcbiAgfSxcclxuICBlZGl0QXZhdGFyUG9wdXBTZWxlY3RvclxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGltYWdlVmlld1BvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKHZpZXdlclBvcHVwU2VsZWN0b3IpO1xyXG5jb25zdCBwcm9maWxlVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoZm9ybUNvbmZpZywgZWRpdFByb2ZpbGVGb3JtU2VsZWN0b3IpO1xyXG5jb25zdCBhZGRJbWFnZVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGZvcm1Db25maWcsIGFkZEltYWdlRm9ybVNlbGVjdG9yKTtcclxuY29uc3QgZWRpdEF2YXRhclZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKFxyXG4gIGZvcm1Db25maWcsXHJcbiAgZWRpdEF2YXRhckZvcm1TZWxlY3RvclxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlbGV0ZUNvbmZpcm1Qb3B1cCA9IG5ldyBDb25maXJtYXRpb25Qb3B1cChcclxuICBjb25maXJtYXRpb25Qb3B1cFNlbGVjdG9yXHJcbik7XHJcblxyXG5hZGRJbWFnZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gYWRkSW1hZ2VQb3B1cC5vcGVuKCkpO1xyXG5lZGl0UHJvZmlsZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gZWRpdFByb2ZpbGVQb3B1cC5vcGVuKCkpO1xyXG5wcm9maWxlQXZhdGFyT3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gZWRpdEF2YXRhclBvcHVwLm9wZW4oKSk7XHJcblxyXG5hZGRJbWFnZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbmVkaXRQcm9maWxlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuZWRpdEF2YXRhclBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbmltYWdlVmlld1BvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbmRlbGV0ZUNvbmZpcm1Qb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5wcm9maWxlVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuYWRkSW1hZ2VWYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5lZGl0QXZhdGFyVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiRm9ybVZhbGlkYXRvciIsImNvbmZpZyIsImZvcm1TZWxlY3RvciIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJfaW5wdXRTZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEVycm9yQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJfZm9ybSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInZhbHVlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2IiwicHJldmVudERlZmF1bHQiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfdGhpcyIsImlucHV0TGlzdCIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJidXR0b25FbGVtZW50IiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiZm9yRWFjaCIsImlucHV0IiwiX2hpZGVJbnB1dEVycm9yIiwiX3RoaXMyIiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsIl9zZXRDdXN0b21FcnJvck1lc3NhZ2UiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX3Nob3dJbnB1dEVycm9yIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfaGFzSW52YWxpZElucHV0IiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwic29tZSIsImlucHV0RWxlbWVudCIsImVycm9yTWVzc2FnZSIsImVycm9yRWxlbWVudCIsImNvbmNhdCIsImlkIiwidGV4dENvbnRlbnQiLCJ2YWxpZGl0eVN0YXRlIiwidmFsdWVNaXNzaW5nIiwic2V0Q3VzdG9tVmFsaWRpdHkiLCJ0b29TaG9ydCIsInR5cGVNaXNtYXRjaCIsIlNlY3Rpb24iLCJfcmVmIiwiY29udGFpbmVyU2VsZWN0b3IiLCJpdGVtcyIsInJlbmRlcmVyIiwiX2l0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsImNsZWFyIiwiaXRlbSIsImFwcGVuZCIsImlubmVySFRNTCIsImZvcm1Db25maWciLCJmb3JtRmllbGRTZWxlY3RvciIsInBvcHVwVmlzaWJsZSIsImNhcmRMaWtlQnRuU2VsZWN0b3IiLCJjYXJkRGVsZXRlQnRuU2VsZWN0b3IiLCJjYXJkQnRuTGlrZUFjdGl2ZSIsImVubGFyZ2VkSW1hZ2UiLCJlbmxhcmdlZEltYWdlVGl0bGUiLCJwcm9maWxlIiwiZWRpdFByb2ZpbGVCdG4iLCJhZGRJbWFnZUJ0biIsInByb2ZpbGVBdmF0YXJPdmVybGF5IiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX2lzT3BlbiIsIl9lbGVtZW50IiwiY2xvc2UiLCJfaGFuZGxlRXNjQ2xvc2UiLCJQb3B1cFdpdGhJbWFnZSIsIl9Qb3B1cCIsIl9pbmhlcml0cyIsIl9zdXBlciIsIm5hbWUiLCJsaW5rIiwiX3JlZiRhbHQiLCJhbHQiLCJzcmMiLCJfZ2V0IiwiX2dldFByb3RvdHlwZU9mIiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJfcmVmJHN1Ym1pdERlZmF1bHRUZXgiLCJzdWJtaXREZWZhdWx0VGV4dCIsIl9yZWYkc3VibWl0U2VuZFRleHQiLCJzdWJtaXRTZW5kVGV4dCIsIl9yZWYkb25PcGVuIiwib25PcGVuIiwiX3JlZiRvbkNsb3NlIiwib25DbG9zZSIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX29uT3BlbiIsIl9vbkNsb3NlIiwiX3N1Ym1pdEJ0biIsIl9zdWJtaXREZWZhdWx0VGV4dCIsIl9zdWJtaXRTZW5kVGV4dCIsInZhbHVlcyIsIl9nZXRJbnB1dFZhbHVlcyIsImRhdGEiLCJfdGhpczMiLCJlbnRyaWVzIiwiX3JlZjIiLCJfcmVmMyIsInJlc2V0IiwiZm9ybVZhbHVlcyIsImZpZWxkIiwiVXNlckluZm8iLCJuYW1lU2VsZWN0b3IiLCJhYm91dFNlbGVjdG9yIiwiYXZhdGFyU2VsZWN0b3IiLCJfdXNlcklkIiwiX2lkIiwiX25hbWVFbGVtZW50IiwiX2Fib3V0RWxlbWVudCIsIl9hdmF0YXJFbGVtZW50IiwiYWJvdXQiLCJfcmVmNCIsImF2YXRhciIsIkNhcmQiLCJ0ZW1wbGF0ZVNlbGVjdG9yIiwiaGFuZGxlQ2FyZENsaWNrIiwidXNlcklkIiwiX25hbWUiLCJfbGluayIsIl9hbHQiLCJfdGVtcGxhdGVTZWxlY3RvciIsIl91c2VyTGlrZWQiLCJsaWtlcyIsImVsZW0iLCJfbGlrZUNvdW50IiwibGVuZ3RoIiwiX2lzT3duZXIiLCJvd25lciIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfdGhpcyRfYWx0IiwiX2dldFRlbXBsYXRlIiwiY2FyZEltYWdlIiwiX2xpa2VCdG5FbGVtZW50IiwiX3JlbmRlckxpa2VzIiwiX3RvZ2dsZUxpa2VCdXR0b24iLCJjb25maXJtRGVsZXRpb25Qb3B1cCIsImFyb3VuZEFwaSIsImRlbGV0ZUNhcmQiLCJjYXRjaCIsImFsZXJ0RXJyb3IiLCJfZGVsZXRlQ2FyZCIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJfbGlrZSIsIl9kaXNsaWtlIiwidGhlbiIsInJlcyIsImxpa2VDYXJkIiwiZGlzbGlrZUNhcmQiLCJhZGRDYXJkVG9QYWdlIiwiY2FyZEVsZW1lbnQiLCJpbWdEYXRhIiwiaW1hZ2VWaWV3UG9wdXAiLCJvcGVuIiwidXNlckluZm8iLCJnZXRVc2VySWQiLCJnZW5lcmF0ZUNhcmQiLCJjYXJkU2VjdGlvbiIsImFkZEl0ZW0iLCJjaGVja1Jlc3BvbnNlIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsImVyciIsImFsZXJ0IiwiQXBpIiwiYmFzZVVybCIsImhlYWRlcnMiLCJfYmFzZVVybCIsIl9oZWFkZXJzIiwiZmV0Y2giLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImNhcmRJZCIsIkNvbmZpcm1hdGlvblBvcHVwIiwiX2hhbmRsZUNvbmZpcm0iLCJoYW5kbGVyIiwiYXV0aG9yaXphdGlvbiIsImdldFVzZXJEYXRhIiwicmVzdWx0Iiwic2V0VXNlckluZm8iLCJzZXRVc2VyQXZhdGFyIiwiZ2V0SW5pdGlhbENhcmRzIiwicmVuZGVySXRlbXMiLCJlZGl0UHJvZmlsZVBvcHVwIiwidXBkYXRlVXNlckRhdGEiLCJzZXRGb3JtVmFsdWVzIiwiZ2V0VXNlckluZm8iLCJwcm9maWxlVmFsaWRhdG9yIiwiY2xlYXJXYXJuaW5ncyIsImFkZEltYWdlUG9wdXAiLCJhZGRDYXJkIiwidGl0bGUiLCJhZGRJbWFnZVZhbGlkYXRvciIsImVkaXRBdmF0YXJQb3B1cCIsInVwZGF0ZUF2YXRhciIsImVkaXRBdmF0YXJWYWxpZGF0b3IiLCJkZWxldGVDb25maXJtUG9wdXAiLCJzZXRFdmVudExpc3RlbmVycyIsImVuYWJsZVZhbGlkYXRpb24iXSwic291cmNlUm9vdCI6IiJ9